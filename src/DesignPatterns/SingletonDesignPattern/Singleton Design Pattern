Singleton Design Pattern

Singleton pattern is one of the simplest design patterns in Java.
This type of design pattern comes under creational pattern as this pattern provides
one of the best ways to create an object.

This pattern involves a single class which is responsible to create an object while making
sure that only single object gets created.

This class provides a way to access its only object which can be accessed directly without
need to instantiate the object of the class.

Use of Singleton Pattern
    -   Singleton pattern is used for logging, driver objects, caching and thread pool.
    -   There must be exactly one instance of a class, and it must be accessible to clients
    from a well-known access point
    -   When the sole instance should be extensible by subclassing, and clients should be able
    to use an extended instance without modifying their code.

Benefits:

    -   Controlled access to the single instance.
    -   Reduced namespace pollution.
    -   Allows refinement of operations and representation.
    -   Permits a variable number of instances (more than one, if desired).
    -   More flexible than class operations.


Trade-offs:

    -   Difficult to test due to global state.
    -   Potentially more complex lifecycle management.
    -   Can introduce bottlenecks if used in a concurrent context without careful synchronization.
